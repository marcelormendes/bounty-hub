generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "./diagram.md"      // Set filename to .md
  outputFormat = "markdown"   // Set format to markdown
  theme = "dark"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  website   String?
  users     User[]
  bounties  Bounty[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  firstName            String
  lastName             String
  password             String
  role                 UserRole  @default(DEVELOPER)
  profileImage         String?
  bio                  String?
  githubUrl            String?
  portfolioUrl         String?
  stripeCustomerId     String?
  stripeConnectAccountId String?
  company              Company?  @relation(fields: [companyId], references: [id])
  companyId            String?
  createdBounties      Bounty[]  @relation("CreatedBounties")
  assignedBounties     Bounty[]  @relation("AssignedBounties")
  claims               BountyClaim[]
  payments             Payment[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Bounty {
  id              String        @id @default(uuid())
  title           String
  description     String
  type            BountyType    @default(DEVELOPMENT)
  price           Decimal       @db.Decimal(10, 2)
  status          BountyStatus  @default(OPEN)
  githubIssueUrl  String?
  githubPRUrl     String?
  attachments     Json?
  creator         User          @relation("CreatedBounties", fields: [creatorId], references: [id])
  creatorId       String
  assignee        User?         @relation("AssignedBounties", fields: [assigneeId], references: [id])
  assigneeId      String?
  company         Company?      @relation(fields: [companyId], references: [id])
  companyId       String?
  claims          BountyClaim[]
  payments        Payment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model BountyClaim {
  id        String      @id @default(uuid())
  bounty    Bounty      @relation(fields: [bountyId], references: [id])
  bountyId  String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  status    ClaimStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

model Payment {
  id         String        @id @default(uuid())
  bounty     Bounty        @relation(fields: [bountyId], references: [id])
  bountyId   String
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  amount     Decimal
  status     PaymentStatus
  stripeId   String?
  createdAt  DateTime      @default(now())
  paidAt     DateTime?
}

enum UserRole {
  CLIENT
  DEVELOPER
  DESIGNER
  ADMIN
}

enum BountyStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
  PAID
}

enum BountyType {
  DEVELOPMENT
  DESIGN
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}