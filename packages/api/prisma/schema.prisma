generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "./diagram.md"      // Set filename to .md
  outputFormat = "markdown"   // Set format to markdown
  theme = "dark"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @default(uuid())
  email     String
  name      String
  website   String?
  users     ClientUser[]
  bounties  Bounty[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   String    @id
  email                String    @unique
  firstName            String
  lastName             String
  role                 UserRole  @default(DEVELOPER)
  bio                  String?
  githubUrl            String? @unique
  portfolioUrl         String?
  stripeCustomerId     String?
  stripeConnectAccountId String?
  tier                 Tier     @default(FREE)
  monthyClaims         Int      @default(0)
  claimsResetAt        DateTime @default(dbgenerated("date_trunc('month', now()) + interval '1 month'"))
  payoutsEnabled       Boolean @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  clients      ClientUser[]
  claims       BountyClaim[]
  assigned     Bounty[]      @relation("AssignedBounties")
  created      Bounty[]      @relation("CreatedBounties")
  payments     Payment[]
}

model Bounty {
  id          String    @id @default(uuid())
  client   Client   @relation(fields: [clientId], references: [id])
  clientId    String
  creator  User     @relation("CreatedBounties", fields: [creatorId], references: [id])
  creatorId String
  assignee User?    @relation("AssignedBounties", fields: [assigneeId], references: [id])
  assigneeId String?
  title       String
  description String
  reward      Decimal    @db.Decimal(10,2)
  status      BountyStatus @default(OPEN) // OPEN → CLAIMED → IN_PROGRESS → COMPLETED → APPROVED → PAID
  labels      String[]   @db.VarChar(32)  // tags / skills
  githubIssueUrl String  @unique
  githubPrUrl    String?
  attachments Json?
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  releasedAt  DateTime?   

  claims BountyClaim[]
  payments Payment[]

  @@index([status, clientId])
}

model BountyClaim {
  id         String @id @default(uuid())
  bounty   Bounty @relation(fields: [bountyId], references: [id])
  bountyId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  status     ClaimStatus  @default(PENDING) // PENDING → APPROVED / REJECTED / WITHDRAWN
  expiresAt  DateTime     // set to now() + 24h
  createdAt  DateTime     @default(now())

  @@unique([bountyId, userId])          // one claim per dev per bounty
  @@index([status, expiresAt])
  @@index([userId, createdAt])          // quota checks
}

model Payment {
  id         String        @id @default(uuid())
  bounty   Bounty @relation(fields: [bountyId], references: [id])
  bountyId   String
  user    User   @relation(fields: [userId], references: [id])
  userId     String
  amount     Decimal
  status     PaymentStatus
  stripeId   String?
  createdAt  DateTime      @default(now())
  paidAt     DateTime?
}

model ClientUser { 
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@id([clientId, userId])
  @@index([userId])
}

enum Tier { 
  FREE 
  FREEMIUM_10 
  PREMIUM_20 
}

enum UserRole {
  CLIENT
  DEVELOPER
  ADMIN
}

enum BountyStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
  PAID
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}